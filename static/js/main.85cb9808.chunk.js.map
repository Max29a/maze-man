{"version":3,"sources":["Maze.react.tsx","Constants.tsx","ControlPanel.react.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["Maze","props","mazeArray","map","row","index","square","innerIndex","ControlPanel","useState","newMazeSize","setNewMazeSize","currentLocation","x","y","type","value","onChange","e","parseInt","target","onClick","onNewMaze","App","maze","startPos","personLocation","setPersonLocation","lastLoc","setLasLoc","isWithinMazeBounds","useCallback","location","length","handleKeyPress","event","validKeyPress","newLoc","key","useEffect","size","console","log","className","onKeyDown","tabIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85cb9808.chunk.js","sourcesContent":["\nimport React from 'react';\nimport {PERSON, WALL, BLANK} from './Constants';\n\ntype Props = {\n    mazeArray: Array<Array<string>>\n};\n\nfunction Maze(props: Props) {\n\n    const createTable = () => {\n        return (<div>\n        {props.mazeArray.map((row, index) => {\n            return <pre key={index}>{row.map((square, innerIndex) => {\n                    switch(square) {\n                        case BLANK:\n                            return ' ';\n                        case WALL: \n                            return '0';\n                        case PERSON:\n                            return 'x';\n                        default:\n                            return `Error at (${index},${innerIndex})`;\n                    }\n                })}\n            </pre>\n        })}\n        </div>);\n    };\n\n    return (\n        <div>{createTable()}</div>\n    )\n}\n\nexport default Maze;","export const UP_ARROW = 'ArrowUp';\nexport const DOWN_ARROW = 'ArrowDown';\nexport const LEFT_ARROW = 'ArrowLeft';\nexport const RIGHT_ARROW = 'ArrowRight';\nexport const UP_KEY = 'w';\nexport const DOWN_KEY = 's';\nexport const LEFT_KEY = 'a';\nexport const RIGHT_KEY = 'd';\n\nexport const PERSON = 'p';\nexport const WALL = '1';\nexport const BLANK = '0';\n\n\n\n// export const isUpKey = (key: string): boolean => {\n//     return (key === UP_ARROW || key === UP_KEY);\n// };\n// export const isDownKey = (key: string): boolean => {\n//     return (key === UP_ARROW || key === UP_KEY);\n// };\n// export const isLeftKey = (key: string): boolean => {\n//     return (key === UP_ARROW || key === UP_KEY);\n// };\n// export const isRightKey = (key: string): boolean => {\n//     return (key === UP_ARROW || key === UP_KEY);\n// };","import React from 'react';\nimport {Location} from './AppTypes';\nimport {useState} from 'react';\n\ntype Props = {\n    currentLocation: Location,\n    onNewMaze: Function\n};\n\nfunction ControlPanel(props: Props) {\n  const [newMazeSize, setNewMazeSize] = useState<number>(20);\n    return (\n      <div>\n        <div>Current Location: {props.currentLocation.x}, {props.currentLocation.y}</div>\n        <div><input type=\"number\" value={newMazeSize} onChange={(e) => {setNewMazeSize(parseInt(e.target.value,10))}}></input>\n        <button onClick={props.onNewMaze(newMazeSize)}>Create New Maze</button></div>\n      </div>\n    )\n}\n\nexport default ControlPanel;","import './App.css';\n\nimport Maze from './Maze.react';\nimport ControlPanel from './ControlPanel.react';\nimport {useState, useCallback, useEffect} from 'react';\nimport * as Constants from './Constants';\nimport {Location} from './AppTypes';\n\nfunction App() {\n  \n  const [maze, setMaze] = useState<Array<Array<string>>>([['1','1','1','1','1','1','1','1','1','1']\n                                                         ,['1','0','0','0','0','0','0','0','0','1']\n                                                         ,['1','0','0','0','0','0','0','0','0','1']\n                                                         ,['1','0','0','0','0','0','0','0','0','1']\n                                                         ,['1','0','0','0','p','0','0','0','0','1']\n                                                         ,['1','0','0','0','0','0','0','0','0','1']\n                                                         ,['1','0','0','0','0','0','0','0','0','1']\n                                                         ,['1','0','0','0','0','0','0','0','0','1']\n                                                         ,['1','0','0','0','0','0','0','0','0','1']\n                                                         ,['1','1','1','1','1','1','1','1','1','1']]\n                                                         );\n\n// ------------------------------------------------------------\n  const startPos:Location = {x:4, y: 4};\n\n  const [personLocation, setPersonLocation] = useState<Location>(startPos);\n  const [lastLoc, setLasLoc] = useState<Location>(startPos);\n\n  const isWithinMazeBounds = useCallback((location: Location): boolean => {\n    return location.x > 0 && location.x < maze[0].length - 1 && location.y > 0 && location.y < maze.length-1;\n  },[maze]);\n\n  const handleKeyPress = useCallback((event:any) => {\n    let validKeyPress = false;\n    let newLoc = {x: personLocation.x, y: personLocation.y};\n\n    switch (event.key) {\n      case Constants.UP_ARROW:\n      case Constants.UP_KEY:\n        validKeyPress = true;\n        newLoc.y = personLocation.y - 1;\n        break;\n      case Constants.DOWN_ARROW:\n      case Constants.DOWN_KEY:\n        validKeyPress = true;\n        newLoc.y = personLocation.y + 1;\n        break;\n      case Constants.LEFT_ARROW:\n      case Constants.LEFT_KEY:\n        validKeyPress = true;\n        newLoc.x = personLocation.x - 1;\n        break;\n      case Constants.RIGHT_ARROW:\n      case Constants.RIGHT_KEY:\n        validKeyPress = true;\n        newLoc.x = personLocation.x + 1;\n        break;\n      default:\n        break;\n    }\n    if (validKeyPress && isWithinMazeBounds(newLoc)) {\n      setPersonLocation(newLoc);\n    }\n\n  },[setPersonLocation, isWithinMazeBounds, personLocation]);\n\n  // keep the maze up to date as the person is \n  useEffect(() => {\n    maze[lastLoc.y][lastLoc.x] = Constants.BLANK;\n    maze[personLocation.y][personLocation.x] = Constants.PERSON;\n    setLasLoc(personLocation);\n  }, [personLocation])\n\n  const onNewMaze = useCallback((size: number) => {\n    console.log(`Should create new maze: ${size}`);\n  },[]);\n\n  return (\n    <div className=\"App\" onKeyDown={handleKeyPress} tabIndex={0}>\n      <ControlPanel currentLocation={personLocation} onNewMaze={onNewMaze} />\n      <header className=\"App-header\">\n        <Maze mazeArray={maze} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}